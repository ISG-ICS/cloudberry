package edu.uci.ics.cloudberry.zion.asterix

import edu.uci.ics.cloudberry.zion.actor.{MockConnClientOld, TestUtil, ViewMetaRecord}
import org.joda.time.{DateTime, DateTimeZone}
import org.mockito.Mockito._
import org.mockito.invocation.InvocationOnMock
import org.mockito.stubbing.Answer
import org.specs2.mock.Mockito
import org.specs2.mutable.Specification
import play.api.libs.json.Json

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._
import scala.concurrent.{Await, Future}

class TwitterViewsManagerActorTest extends Specification with MockConnClientOld with TestData {

  "A TwitterViewsManagerActor" should {
    "load meta store after start " in {
      ok
    }
    "create a store if it is a new view " in {
      ok
    }
    "forward the query to children viewActor " in {
      ok
    }
    "update the meta store when reviece the request" in {
      ok
    }
  }

  "TwitterViewsManagerActorTest Static Functions" should {
    "flushMetaToStore" in {
      val expectedAQL =
        """
          |use dataverse twitter
          |create type typeViewMeta2 if not exists as open {
          |  sourceName: string,
          |  viewKey: string
          |}
          |create dataset twitter.viewMeta (typeViewMeta2) if not exists primary key viewKey
          |upsert into dataset twitter.viewMeta (
          |[ {
          |  "sourceName" : "twitter",
          |  "viewKey" : "twitter_",
          |  "summaryLevel" : {
          |    "spatialLevel" : 1,
          |    "timeLevel" : 3
          |  },
          |  "startTime" : "1970-01-01T00:00:00.000Z",
          |  "lastVisitTime" : "1970-01-01T00:00:05.000Z",
          |  "lastUpdateTime" : "1970-01-01T00:00:04.000Z",
          |  "visitTimes" : 0,
          |  "updateCycle" : 3600
          |}, {
          |  "sourceName" : "twitter",
          |  "viewKey" : "twitter_trump",
          |  "summaryLevel" : {
          |    "spatialLevel" : 1,
          |    "timeLevel" : 3
          |  },
          |  "startTime" : "1970-01-01T00:00:00.000Z",
          |  "lastVisitTime" : "1970-01-01T00:00:05.000Z",
          |  "lastUpdateTime" : "1970-01-01T00:00:04.000Z",
          |  "visitTimes" : 0,
          |  "updateCycle" : 3600
          |}, {
          |  "sourceName" : "twitter",
          |  "viewKey" : "twitter_rain",
          |  "summaryLevel" : {
          |    "spatialLevel" : 1,
          |    "timeLevel" : 3
          |  },
          |  "startTime" : "1970-01-01T00:00:00.000Z",
          |  "lastVisitTime" : "1970-01-01T00:00:05.000Z",
          |  "lastUpdateTime" : "1970-01-01T00:00:04.000Z",
          |  "visitTimes" : 20,
          |  "updateCycle" : 3600
          |} ]
          |);
          |""".stripMargin.trim
      withUpdateAQLConn(Set(expectedAQL)) { conn =>
        val fResult = TwitterViewsManagerActor.flushMetaToStore(conn, testRecords)
        Await.result(fResult, 100 millisecond) must_== true
      }
    }

    "generateSummaryViewAQL" in {
      val str = TwitterViewsManagerActor.generateSummaryViewAQL("ds_tweet", "ds_tweet_", TwitterCountyDaySummaryView.SummaryLevel)
      str.trim must_== ("""
                          |use dataverse twitter
                          |drop dataset ds_tweet_ if exists
                          |
                          |create type autoType if not exists as open {
                          |  id: uuid
                          |}
                          |create dataset ds_tweet_(autoType) if not exists primary key id autogenerated;
                          |
                          |use dataverse twitter
                          |insert into dataset ds_tweet_
                          |(for $t in dataset ds_tweet
                          |  where $t.create_at >= datetime("1970-01-01T00:00:00.000Z")
                          |  and $t.create_at < datetime("2099-01-01T00:00:00.000Z")
                          |  group by
                          |  $state := $t.geo_tag.stateID,
                          |  $county := $t.geo_tag.countyID,
                          |  $timeBin := interval-bin($t.create_at, datetime("2012-01-01T00:00:00"), day-time-duration("P1D")) with $t
                          |  return {
                          |    "stateID": $state,
                          |    "countyID": $county,
                          |    "timeBin": $timeBin,
                          |    "tweetCount": count($t),
                          |    "retweetCount": count(for $tt in $t where $tt.is_retweet return $tt),
                          |    "users": count(for $tt in $t group by $uid := $tt.user.id with $tt return $uid),
                          |    "topHashTags": (for $tt in $t
                          |                      where not(is-null($tt.hashtags))
                          |                      for $h in $tt.hashtags
                          |                      group by $tag := $h with $h
                          |                      let $c := count($h)
                          |                      order by $c desc
                          |                      limit 50
                          |                      return { "tag": $tag, "count": $c})
                          |  }
                          |)
                          | """.stripMargin.trim)
    }

    "loadFromMetaStore" in {
      withQueryAQLConn(Seq(Json.toJson(testRecords))) { conn =>
        val faql = TwitterViewsManagerActor.loadFromMetaStore("ds_tweet", conn)
        Await.result(faql, 2 seconds) must_== (testRecords)
      }
    }

    "generateSubSetViewAQL" in {
      val aql = TwitterViewsManagerActor.generateSubSetViewAQL("ds_tweet", "ds_tweet_rain", "rain")
      aql.trim must_== ("""
                          |use dataverse twitter
                          |drop dataset ds_tweet_rain if exists
                          |create dataset ds_tweet_rain(typeTweet) if not exists primary key "id";
                          |
                          |use dataverse twitter
                          |
                          |upsert into dataset ds_tweet_rain(
                          |for $t in dataset ds_tweet
                          |let $keyword := "rain"
                          |where similarity-jaccard(word-tokens($t."text"), word-tokens($keyword)) > 0.0
                          |and $t.create_at >= datetime("1970-01-01T00:00:00.000Z")
                          |and $t.create_at < datetime("2099-01-01T00:00:00.000Z")
                          |return $t
                          |)
                          | """.stripMargin.trim)
    }
  }
}
