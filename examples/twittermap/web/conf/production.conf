# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret = "Change me"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Defaults to Global in the root package.
# application.global=my.Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Uncomment this for the most verbose Akka debugging:
akka {
  loglevel = "DEBUG"
  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
    mailbox {
      requirements {
        "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" = akka.actor.mailbox.bounded-deque-based
      }
    }
  }
}

play {
  ws {
    timeout {
      connection = 60000
      idle = 600000
    }
  }
}

bounded-mailbox {
  mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
  mailbox-capacity = 2000
  mailbox-push-timeout-time = 10s
}


cloudberry.register = "http://localhost:9000/admin/register"
cloudberry.ws = "ws://localhost:9000/ws"
cloudberry.checkQuerySolvableByView = "ws://localhost:9000/checkQuerySolvableByView"

# Maximum allowable text message size of the web socket
maxTextMessageSize = 5242880 # 5MB

# TwitterMap Extra Function Knobs
# Sentiment Analysis
sentimentEnabled = false
sentimentUDF = "twitter.`snlp#getSentimentScore`(text)"
# Customize TwitterMap for a specific domain
removeSearchBar = false
predefinedKeywords = ["Diabetes", "Sleep Disorder"]

startDate = "2015-11-22T00:00:00.000"

# Defines the maximum number of city polygons that can be cached in the browser.
# The default value is 30000 and this is equal to the number of all cities.
# If this value is set to a non-positive value (<= 0), then the caching feature will not be executed.
# cacheThreshold = 30000

# To display all cities using original polygons.
# us.city.path = "/public/data/city.json"
# To display all cities using simplied polygons (ratio:10%).
us.city.path = "/public/data/city_polygon_simplified_ratio_percent_10.json"
us.citypop.path = "/public/data/allCityPopulation.json"

# Defines the query slicing milliseconds. By default, we enable the query slicing for every query
# and its value (millisseconds) is set to 2000 ms.
# If this value is set to a non-positive value (<= 0), the query slicing method will be disabled.
# querySliceMills = 2000

tweet.url = "http://twitterMapIndex-search-proxy.herokuapp.com/search/tweets?q=%s"

# Heatmap parameters
# How many recent days of the time range predicate of each heatmap query. (Default: 30)
# heatmap.samplingDayRange = 30
# How many tweets at most returned for each heatmap query. (Default: 5000)
# heatmap.samplingLimit = 5000
# How much intensity a tweet contributes to the heatmap. It can be used to configure the color of the heatmap. (Default: 50)
# heatmap.unitIntensity = 50
# The radius of a tweet in heatmap. (Default: 15)
# heatmap.unitRadius = 15

# Pointmap parameters
# How many recent days of the time range predicate of each pointmap query.
# pointmap.samplingDayRange = 30
# How many tweets at most returned for each pointmap query.
# pointmap.samplingLimit = 5000

# Available map types: countmap, pinmap, heatmap.
# If defaultMapType is not provided, countmap will be used. (Default: "countmap")
# defaultMapType = "countmap"

# Sidebar parameters
# Live Tweet query interval - Every how many seconds, we send a query to database to retrieve new tweets. (Default: 60)
liveTweetQueryInterval = 60
# Live Tweet query offset - Every time we query database the new tweets,
#                             how many seconds before now is the query's end time condition. (Default: 30)
liveTweetQueryOffset = 30
# Live Tweet update rate - Every how many seconds, we popup a tweet from queue and show it on page. (Default: 2)
liveTweetUpdateRate = 2
# In order to enable live tweets feature,
# please refer to https://developer.twitter.com/en/docs/basics/authentication/guides/access-tokens.html
# to get your own twitter developer access keys and tokens and fill them to the following 4 parameters.
liveTweetConsumerKey = ""
liveTweetConsumerSecret = ""
liveTweetToken = ""
liveTweetTokenSecret = ""
enableLiveTweet = false