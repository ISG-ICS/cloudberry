#This is the configuration file for kafka
# ~~~~~~~~~~~~

#If true the consumer's offset will be periodically committed in the background.
enable.auto.commit = "true"

#The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.
auto.commit.interval.ms = "1000"

#The timeout used to detect failures when using Kafka's group management facilities.
session.timeout.ms = "30000"

#What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted):
#earliest: automatically reset the offset to the earliest offset
#latest: automatically reset the offset to the latest offset
#none: throw exception to the consumer if no previous offset is found for the consumer's group
#anything else: throw exception to the consumer.
auto.offset.reset = "earliest"

#Deserializer class for key that implements the Deserializer interface.
key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"

#Deserializer class for value that implements the Deserializer interface.
value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"

#Deserializer class for key that implements the Deserializer interface.
key.serializer = "org.apache.kafka.common.serialization.StringSerializer"

#Deserializer class for value that implements the Deserializer interface.
value.serializer = "org.apache.kafka.common.serialization.StringSerializer"

#The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block for max.block.ms after which it will throw an exception.
buffer.memory = "33554432"

#The producer groups together any records that arrive in between request transmissions into a single batched request.  This setting accomplishes this by adding a small amount of artificial delayâ€”that is, rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together.
linger.ms = "1"

#The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. int
batch.size = "16384"

#	The number of acknowledgments the producer requires the leader to have received before considering a request complete.
#acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee.
acks = "all"

#	The amount of time in milliseconds to block waiting for input.
poll.ms = 100